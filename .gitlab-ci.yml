image: node

cache:
    key: '${CI_COMMIT_REF_SLUG}-desktop'
    paths:
        - desktop/node_modules/
        - server/node_modules/
    policy: pull

.only-desktop: &only-desktop
    only:
        refs:
            - dev
            - master
            - merge_requests
        changes:
            - desktop/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-desktop'
        paths:
            - desktop/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - dev
            - master
            - merge_requests
        changes:
            - server/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
        policy: pull

stages:
    - install
    - lint
    - build
    - test
    - deploy

install:desktop:
    stage: install
    <<: *only-desktop
    script:
        - cd desktop
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-desktop'
        paths:
            - desktop/node_modules/
            - desktop/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

lint:desktop:
    stage: lint
    needs: ['install:desktop']
    allow_failure: true
    <<: *only-desktop
    script:
        - cd desktop
        - npm run lint

lint:server:
    stage: lint
    needs: ['install:server']
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm run lint

build:desktop:
    stage: build
    needs: ['install:desktop']
    <<: *only-desktop
    script:
        - cd desktop
        - npm run build
    artifacts:
        paths:
            - desktop/dist/

build:server:
    stage: build
    needs: ['install:server']
    <<: *only-server
    script:
        - cd server
        - npm run build
    artifacts:
        paths:
            - server/out/

test:desktop:
    stage: test
    needs: ['install:desktop']
    <<: *only-desktop
    image: registry.gitlab.com/nikolayradoev/docker-images/chrome-mongo-node:20223
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd desktop
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    artifacts:
        paths:
            - desktop/coverage/

test:server:
    stage: test
    needs: ['install:server']
    <<: *only-server
    script:
        - cd server
        - npm run coverage
    artifacts:
        paths:
            - server/coverage/
pages:
    image: node:19.6.0
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - cd desktop
        - npm ci --cache .npm --prefer-offline
        - npm run deploy -- --base-href $BASE_HREF
        - mkdir ../public
        - mv dist/desktop/* ../public/
    artifacts:
        paths:
            - public

variables:
    EC2_USER: ec2-user
    ORIGIN: 'https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}'

deploy:server:
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - 'which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add < (echo "$EC2_PEM_FILE_CONTENT" | base64 -d)
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - |
            timeout 600 ssh -t -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -x -ev

                # Force kill any node app or any app running on the server port
                forever stopall && sudo fuser -k '${SERVER_PORT}/tcp' && sudo killall node

                # Clone the repository
                git clone ${ORIGIN} repo || echo Git repository already exist
                cd repo

                # Update the remote origin
                # This action is important because the CI_JOB_TOKEN become invalid after each pipeline
                git remote remove origin
                git remote add origin ${ORIGIN}

                # Checkout to the targeted commit
                git fetch --all
                git checkout ${CI_COMMIT_SHA}

                # Build the project
                cd server
                npm ci
                npm run build

                # Launch the server in background and append output to /var/log/messages for CloudWatch
                PORT=${SERVER_PORT} forever start -a -l /home/ec2-user/logs/server out/server/app/index.js
            "
